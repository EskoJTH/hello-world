{-#LANGUAGE ScopedTypeVariables#-}
module Exercise where
import Data.List hiding (foldl)

-- Remove the first occurrence of `x` from the argument list
removeFirst :: Eq a => a -> [a] -> [a] 
removeFirst x = g . foldr f e
    where
      g ~(a,b) = a
      f t ~(a,b) = if t==x then (b,t:b) else (t:a,t:b)
      e = ([],[])

-- Take first n elements from a list
-- >>> take 3 "I am groot"
--     "I a"
take' :: Int -> [a] -> [a] 
take' n = g . foldr f e
    where 
      g :: (Int -> [a]) -> [a]
      g = undefined
      f :: a -> (Int -> [a]) -> (Int -> [a])
      f x acc =  \m -> undefined
      e = (const [])

-- Remove first n elements from a list
-- >>> drop 3 "m groot"
drop' :: Int -> [a] -> [a] 
drop' n = g . foldr f e
    where 
      g = undefined
      f = undefined
      e = undefined
-- Hint: Write types for g, f and e first! 
