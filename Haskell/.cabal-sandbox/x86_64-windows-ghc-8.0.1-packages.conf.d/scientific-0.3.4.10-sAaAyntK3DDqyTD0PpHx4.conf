name: scientific
version: 0.3.4.10
id: scientific-0.3.4.10-sAaAyntK3DDqyTD0PpHx4
key: scientific-0.3.4.10-sAaAyntK3DDqyTD0PpHx4
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: e1c32cd58a4f62654135ad39c6394b1b
trusted: False
import-dirs: C:\projects\Haskell\.cabal-sandbox\x86_64-windows-ghc-8.0.1\scientific-0.3.4.10-sAaAyntK3DDqyTD0PpHx4
library-dirs: C:\projects\Haskell\.cabal-sandbox\x86_64-windows-ghc-8.0.1\scientific-0.3.4.10-sAaAyntK3DDqyTD0PpHx4
data-dir: C:\projects\Haskell\.cabal-sandbox\x86_64-windows-ghc-8.0.1\scientific-0.3.4.10
hs-libraries: HSscientific-0.3.4.10-sAaAyntK3DDqyTD0PpHx4
depends:
    base-4.9.0.0 binary-0.8.3.0 bytestring-0.10.8.1 containers-0.5.7.1
    deepseq-1.4.2.0 ghc-prim-0.5.0.0
    hashable-1.2.4.0-Ctl752zbguF6QanxurLOm2 integer-gmp-1.0.0.1
    integer-logarithms-1.0.1-BMmDc9fXSmWBX4AQeoakwE
    text-1.2.2.1-9Yh8rJoh8fO2JMLWffT3Qs
    vector-0.11.0.0-6uB77qGCxR6GPLxI2sqsX3
haddock-interfaces: C:\projects\Haskell\.cabal-sandbox\doc\x86_64-windows-ghc-8.0.1\scientific-0.3.4.10\html\scientific.haddock
haddock-html: C:\projects\Haskell\.cabal-sandbox\doc\x86_64-windows-ghc-8.0.1\scientific-0.3.4.10\html
