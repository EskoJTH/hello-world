	 {Ord a => [a] > a}  {(a->b)->[a]->[b]}  {[a]->Int}  {Str->[Str]}  {}  
⊢f str = maximum             (map                length      (words        str))


⊢maximum (map length (words str))

=Free variable str to Str. words :: Str->[Str]

              		     {Str->[Str]}  {Str}
Str str ⊢maximum (map length (words         str))

=Funktion application. length :: [c]->Int

                      {[c]->Int}  {[Str]     }
Str str ⊢maximum (map length      (words str))

= map :: (a->b)->[a]->[b]

                  {(a->b)->[a]->[b]}  {[c]->Int}  {[Str]     }
Str str ⊢maximum (map                 length      (words str))


=Set type variable a to Str. Set type variabel [c] to Str. Set type b to Int. Funktion application

                 { [Int]                }
Str str ⊢maximum (map length (words str))

=maximum :: Ord a => [a] -> a. Lets set a as Int

         {[Int]->Int} { [Int]                }
Str str ⊢maximum      (map length (words str))

=Funktion application.

         { Int                               }
Str str ⊢maximum      (map length (words str))









