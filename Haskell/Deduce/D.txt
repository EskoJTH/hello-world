        {(a -> b) -> [a] -> [b]}  {(c -> d) -> [c] -> [d]}
⊢f xs = map                        map                      xs

= The first parameter that map gets is xs which must be type (c->d) then.

        {(a -> b) -> [a] -> [b]}  {(c -> d) -> [c] -> [d]}
⊢f xs = map                        map xs

= map xs returns a funktion of type [c] -> [d] which first map then takes as its first parameter

        {([c] -> [d]) -> [[a]] -> [[b]]}  {(c -> d) -> [c] -> [d]}
⊢f xs = map                        map xs

= Lets combine these two and we get

        {(c -> d) -> [[a]] -> [[b]]}
⊢f xs = map map xs

